<?php//// Менеджер пользователей//class M_Users {		private static $instance;	// экземпляр класса	private $msql;				// драйвер БД	private $sid;				// идентификатор текущей сессии	private $uid;				// идентификатор текущего пользователя   	//	//Получение единственного экземпляра (одиночка)	//	public static function Instance() 	{		if (self::$instance == null)		self::$instance = new M_Users();				return self::$instance;	}		//	// Конструктор	//	public function __construct()	{		$this->msql = MSQL::Instance();		$this->sid = null;		$this->uid = null;	}			//	// Очистка неиспользуемых сессий	// (c_base)	public function ClearSessions()	{		/*время ч/з которое очишаются сесии, и пользователя выбрасывает из программы*/		$min = date('Y-m-d H:i:s', time() - 60 /*60*/ * 20); 					$t = "time_last < '%s'";		$where = sprintf($t, $min);		$this->msql->Delete('sessions', $where);	}		//	// Авторизация	// $login 		- логин	// $password 	- пароль	// $remember 	- нужно ли запомнить в куках	// результат	- true или false	//	public function Login($login, $password, $remember=true)	{		// вытаскиваем пользователя из БД 		$user = $this->GetByLogin($login);		if ($user == null)			return false;				$id_user = $user['id_user'];						// проверяем пароль		if ($user['password'] != md5($password))			return false;						// проверяем подтвердил ли пользователь регистрацию ч/з мыло (1-нет 2-да)		if ($user['param'] != 2)			return false;						// запоминаем имя и md5(пароль)		/**/	// закидываем логин и пароль в PHP сессию (для того, чтобы если другой пользователь очистит таблицу сессий ее можно было востановить)		$_SESSION['login'] = $login;		$_SESSION['password'] =  md5($password);			//если надо было запомнить куки		//if ($remember)		//{			$expire = time() + 3600 * 24 * 100;			setcookie('login', $login, $expire,"","","",true);			setcookie('password', md5($password), $expire,"","","",true);		//}								// открываем сессию и запоминаем SID		$this->sid = $this->OpenSession($id_user);				return true;	}		//	// Выход	//	public function Logout()	{		setcookie('login', '', time() - 1);		setcookie('password', '', time() - 1);		unset($_COOKIE['login']);		unset($_COOKIE['password']);		unset($_SESSION['sid']);		unset($_SESSION['login']);		unset($_SESSION['password']);		//$_SESSION['login'] $_SESSION['password'] добавлены позже 		$this->sid = null;		$this->uid = null;	}			//	// Получает пользователя по логину	//	public function GetByLogin($login)	{			$t = "SELECT * FROM users WHERE login = '%s'";		$query = sprintf($t, mysql_real_escape_string($login));		$result = $this->msql->Select($query);		return $result[0];	}		//	// Получает пользователя по фамилии 	//	public function GetByFamily($SecName,$id_city,$name = '')	{			if ($SecName == '')			return false;		$SecName = mysql_real_escape_string($SecName);		$id_city = sprintf("%d", 									$id_city);		$where = "SecName LIKE '%$SecName%'";		if($name != ''){			$name = mysql_real_escape_string($name);			$where = "SecName LIKE '%$SecName%' AND name LIKE '%$name%' ";		}				$query = "SELECT id_user,SecName,name,login,MinFoto FROM users WHERE $where  AND id_city = '$id_city' LIMIT 1000";		$result = $this->msql->Select($query);		return $result;	}		//	// Получает пользователей по фамилии во всех городах 	//	public function GetByFamilyAllCity($SecName,$name = '')	{			if ($SecName == '')			return false;		$SecName = mysql_real_escape_string($SecName);		$where = "SecName LIKE '%$SecName%'";		if($name != ''){			$name = mysql_real_escape_string($name);			$where = "SecName LIKE '%$SecName%' AND name LIKE '%$name%' ";		}				$query = "SELECT u.id_user,u.SecName,u.name,u.login,u.MinFoto,c.city FROM users u LEFT JOIN  city c ON u.id_city=c.id_city	 WHERE $where  LIMIT 1000";		$result = $this->msql->Select($query);		return $result;	}		//	// Получение пользователчя по маске 	//	public function GetByMask($maska)	{			//проверяем маску у пользователей		$t = "SELECT * FROM users WHERE maska = '$maska'";		$query = sprintf($t, mysql_real_escape_string($maska));		$result = $this->msql->Select($query);		if ($result[0] == null){//если нету таких масок у пользователей			//то проверяем в удаленных масках			$t = "SELECT * FROM DelMasks WHERE maska = '$maska'";			$query = sprintf($t, mysql_real_escape_string($maska));			$result = $this->msql->Select($query);					}				return $result[0];	}				//	// Получение пользователя	// $id_user		- если не указан, брать текущего	// результат	- объект пользователя	//	public function Get($id_user = null,$short = null)	{			// Если id_user не указан, берем его по текущей сессии.		if ($id_user == null)			$id_user = $this->GetUid();					if ($id_user == null)			return null;					//если указан $short то тогда делаем запрос c мин-ой выборкой		//просто возвращаем пользователя по id_user.		if($short != null){			$t = "SELECT u.login,u.maska,u.MaskFoto,u.HideMaskDate,u.dimension,u.id_user,u.name,u.SecName,u.MinFoto,u.Mail_polit,s.id_session  FROM users u 			LEFT JOIN  sessions s ON u.id_user=s.id_user					WHERE u.id_user = '%d'";		}else{			$t = "SELECT u.*,s.id_session  FROM users u 			LEFT JOIN  sessions s ON u.id_user=s.id_user					WHERE u.id_user = '%d'";				}				$query = sprintf($t, $id_user);		$result = $this->msql->Select($query);		return $result[0];					//u.id_user,u.login,u.password,u.id_role,u.name,u.year,u.param,u.time		/*$t = "SELECT * FROM users WHERE id_user = '%d'";		$query = sprintf($t, $id_user);		$result = $this->msql->Select($query);		return $result[0];	*/		}		//	// Проверка наличия привилегии	// $priv 		- имя привилегии	// $id_user		- если не указан, значит, для текущего	// результат	- true или false	//	public function Can($priv, $id_user = null)	{					if ($id_user == null) {			$user = $this->Get();			$id_user =  $user['id_user'];			}		$query = "SELECT * FROM users u 		INNER JOIN roles r ON u.id_role=r.id_role		INNER JOIN priv2roles pr ON r.id_role=pr.id_role		INNER JOIN privs p ON pr.id_priv=p.id_priv		WHERE p.name = '$priv' AND u.id_user = '$id_user' ";		$arr = $this->msql->Select($query);			if (count($arr)>0)				return true;			else				return false;					}	// Проверка активности пользователя	// $id_user		- идентификатор	// результат	- true если online	//	public function IsOnline($id_user)	{				$t = "SELECT DISTINCT id_user FROM sessions WHERE id_user = '%d'";		$query = sprintf($t, $id_user);			$n = $this->msql->Select($query);			if ($n!=null){				//проверяем в каком измерении				$user = $this->Get($id_user,1);				if($user['dimension'] == 1)					return 1;				else					return 2;							}else{					return false;			}			}		//	//функция выбора всех id_user (зарегистрированных)	//возврашает массив id и login	public function AllUsers()	{	$query = "SELECT id_user,Name,SecName,login,Mail_polit FROM users ORDER BY id_user DESC";	$arr = $this->msql->Select($query);					return $arr;	}		//	//функция выбора всех id_user которы онлайн (зарегистрированных)	//возврашает массив id 	public function AllOnlineUsers()	{	$query = "SELECT DISTINCT id_user FROM sessions ORDER BY id_user DESC";	$arr = $this->msql->Select($query);					return $arr;	}	//	//функция выбора всех характеристик сайта для футера	//	public function GetFootersSet()	{		//вытаскиваем кол-во зарег-ых пользователей		$query = "SELECT count(*) from users";		$var = $this->msql->Select($query);		$arr['us'] = $var['0']['count(*)'];				//вытаскиваем кол-во сообщений м/д пользователями		$query = "SELECT count(*) from msg_Users";		$var = $this->msql->Select($query);		$arr['ms'] = $var['0']['count(*)'];				//вытаскиваем кол-во зарег-ых организаций		$query = "SELECT count(*) from s_organizations";		$var = $this->msql->Select($query);		$arr['or'] = $var['0']['count(*)'];					return $arr;	}			//	// Получение id текущего пользователя	// результат	- UID	//	public function GetUid()	{			// Проверка кеша.		if ($this->uid != null)			return $this->uid;			// Берем по текущей сессии.		$sid = $this->GetSid();						if ($sid == null)			return null;					$t = "SELECT id_user FROM sessions WHERE sid = '%s'";		$query = sprintf($t, mysql_real_escape_string($sid));		$result = $this->msql->Select($query);						// Если сессию не нашли - значит пользователь не авторизован.		if (count($result) == 0)			return null;					// Если нашли - запоминм ее.		$this->uid = $result[0]['id_user'];		return $this->uid;	}	//	// Функция возвращает идентификатор текущей сессии	// результат	- SID	//	private function GetSid()	{		// Проверка кеша.		if ($this->sid != null)			return $this->sid;			// Ищем SID в сессии.		$sid = $_SESSION['sid'];										// Если нашли, попробуем обновить time_last в базе. 		// Заодно и проверим, есть ли сессия там.		if ($sid != null)		{			$session = array();			$session['time_last'] = date('Y-m-d H:i:s'); 						$t = "sid = '%s'";			$where = sprintf($t, mysql_real_escape_string($sid));			$affected_rows = $this->msql->Update('sessions', $session, $where);			if ($affected_rows == 0)			{				$t = "SELECT count(*) FROM sessions WHERE sid = '%s' ";						$query = sprintf($t, mysql_real_escape_string($sid));				$result = $this->msql->Select($query);								if ($result[0]['count(*)'] == 0)					$sid = null;						}					}						// Нет сессии? Ищем логин и md5(пароль) в куках. 		// Т.е. пробуем переподключиться.		if ($sid == null && isset($_COOKIE['login']))		{			$user = $this->GetByLogin($_COOKIE['login']);						if ($user != null && $user['password'] == $_COOKIE['password'])				$sid = $this->OpenSession($user['id_user']);		}/**/	elseif($sid == null && isset($_SESSION['login'])){		// ИЛИ ищем логин и md5(пароль) в сессии (на случай если таблицу очистил другой юзер, а мы долго не были активны но не выходили)		// Т.е. пробуем переподключиться.					$user = $this->GetByLogin($_SESSION['login']);						if ($user != null && $user['password'] == $_SESSION['password'])				$sid = $this->OpenSession($user['id_user']);		}				// Запоминаем в кеш.		if ($sid != null)			$this->sid = $sid;				// Возвращаем, наконец, SID.		return $sid;			}			//	// Открытие новой сессии	// результат	- SID	//	private function OpenSession($id_user)	{		// генерируем SID		$sid = $this->GenerateStr(10);						// вставляем SID в БД		$now = date('Y-m-d H:i:s'); 		$session = array();		$session['id_user'] = $id_user;		$session['sid'] = $sid;		$session['time_start'] = $now;		$session['time_last'] = $now;						$this->msql->Insert('sessions', $session); 						// регистрируем сессию в PHP сессии		$_SESSION['sid'] = $sid;								// возвращаем SID		return $sid;		}		//	// Генерация случайной последовательности	// $length 		- ее длина	// результат	- случайная строка	//	function GenerateStr($length = 10) 	{		$chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPRQSTUVWXYZ0123456789";		$code = "";		$clen = strlen($chars) - 1;  		while (strlen($code) < $length)             $code .= $chars[mt_rand(0, $clen)];  		return $code;	}		//дополнительные выборки	//	//	//	//			//	// Получает город пользователя	//	public function GetСity($id_city)	{			$t = "SELECT city FROM city WHERE id_city = '%d'";		$query = sprintf($t, $id_city);		$result = $this->msql->Select($query);		return $result[0];	}		//	// изменяем город у пользователя (из C_Profile)	//	public function ChangeСity($id_city)	{		$object = array();		$object['id_city'] = $id_city;						$t = "id_user = '%d'";				$where = sprintf($t, $this->uid);						  		$this->msql->Update('users',$object,$where);		return true;	}		//	// изменяем время последнего посещения	//	public function ChangeVisitTime()	{		$object = array();		$object['time_last'] = date('Y-m-d H:i:s');						$t = "id_user = '%d'";				$where = sprintf($t, $this->uid);						  		$this->msql->Update('users',$object,$where);		return true;	}	//	// изменение кол-ва балов	//(c_base)	public function ChangeBalls($id_user,$balls){		// Запрос.		$id = sprintf("'%d'", $id_user);		$t = "UPDATE users		SET	bals = bals + $balls 		WHERE id_user = $id";				//die($t);					$result = mysql_query($t);	}		//	// изменение каких-либо характеристик пользователя	//(c_base)	public function ChangeUsersSettings($id_user,$param,$value){		// Запрос.		//$id = sprintf("'%d'", $id_user);		$object = array();				Switch ($param) {		case 'dimension':			$object['dimension'] = $value;			break;		case 'maska': 			/*if($value =='generate'){				//генерируем маску сами				$value = $this->GenerateStr(8);			}*/			//$value = htmlspecialchars($value);			$object['maska'] = $value;			$object['timeStart_Mask'] = date('Y-m-d H:i:s');			break;		case 'HideMaskDate':			$object['HideMaskDate'] = $value;			break;		case 'MaskFoto':			$object['MaskFoto'] = $value;			break;				case 'mouving':			$object['mouving'] = $value;			break;			}						//die(var_dump($object));		$t = "id_user = '%d'";				$where = sprintf($t, $id_user);						  		$this->msql->Update('users',$object,$where);								/*$t = "UPDATE users		SET	$param = $value 		WHERE id_user = $id";				//die($t);					$result = mysql_query($t);*/		return true;	}		//	// создание каких-либо новых записей связанных с пользователем	//	public function InsertAny($user,$table,$value = ''){		$object = array();		Switch ($table) { //создание в таблице брошенных масок новой (при удалении или замене маски)		case 'DelMasks':			$object['maska'] = $user['maska'];			$object['id_user'] = $user['id_user'];			$object['time_start'] = $user['timeStart_Mask'];			$object['time_del'] = date('Y-m-d H:i:s');					break;		}		return $this->msql->Insert($table, $object); 	}			//	// Проверка по таблице Date_Update подошло ли время выполнения каких-либо скриптов (с определенной периодичностью)	//(прописвается настояшее время, и для каждого поля есть свой определнный промежуток времени через который запустится скрипт)	public function ScriptActivate($pole){					Switch ($pole) {		case 'Likes': 				$past = "-1 day"; //(раз в сутки) необходимое время (которое должно пройти от настоящего момента) (интервал обновления)			break;		}				$query = "update Date_Update set $pole = NOW()  WHERE $pole < date_add(NOW(), interval $past) ";		$result = mysql_query($query); 				//если время прошло (т.е поменялось), то необходимо включить скрипт		if(mysql_affected_rows() > 0){			Switch ($pole) {			case 'Likes': //меняем всем текушим значениям симпатии на требуемые, если время подошло					//подключаем модуль работы с лайками					$m_Likes = M_Likes::Instance();						//меняем значения симпатий					$m_Likes->ChangeLikesByTime();				break;			}					}					}			//	// Скрипт изменеия времени на промежуток времени (время увеличивается на выставленный промежуток От настоящего времени )	//	public function ChangeDate($table,$where,$time){			$pole = "date_Knowing";		$id_user = $where['id_user'];						Switch ($table) {		case 'l_user2soobsh': 				$id_soobsh = $where['id_soobsh'];				$where = "id_user = $id_user AND id_soobsh = $id_soobsh";				//$pole = "-1 day"; //(раз в сутки) необходимое время (которое должно пройти от настоящего момента) (интервал обновления)			break;		case 'l_user2organ': 				$id_organ = $where['id_organ'];				$where = "id_user = $id_user AND id_organ = $id_organ";				//$pole = "-1 day"; //(раз в сутки) необходимое время (которое должно пройти от настоящего момента) (интервал обновления)			break;		case 'l_user2group': 				$id_group = $where['id_group'];				$where = "id_user = $id_user AND id_group = $id_group";				//$pole = "-1 day"; //(раз в сутки) необходимое время (которое должно пройти от настоящего момента) (интервал обновления)			break;		}						$query = "update $table set $pole = date_add(NOW(), interval $time)  WHERE $where";		$result = mysql_query($query); 	//die($query);	return mysql_affected_rows();		//if(mysql_affected_rows() > 0)			}		//	// Получение массива защиты юзера от других юзеров	//	public function GetUserProtection($id_user){			$t = "SELECT * FROM 2d_UserProtection WHERE id_user = '%d'";		$query = sprintf($t, $id_user);		$result = $this->msql->Select($query);		return $result[0];	}				//	// Удаление какой либо строки по параметру	//	public function DeleteStrBy($table,$where)	{		Switch ($table) {		case '2d_UserProtection': 				$t = "id_user = '%d'" ;					$where = sprintf($t, 								$where['id_user']);			break;		case 'ThrownOut': 				$t = "id_user = '%d'" ;					$where = sprintf($t, 								$where['id_user']);			break;		case '2d_likes': 				$t = "( id_object  = '%d') OR ( id_valuer  = '%d')" ;					$where = sprintf($t, 								$where['id_user'],$where['id_user']);			break;		}   		$this->msql->Delete($table,$where);		return true;		}		//	// редактирование защиты юзера от других юзеров (увеличение времени окончания защиты)	//	public function EditUserProtection($id_user,$prot){				//$past = "7 day"; //(раз в сутки) необходимое время (которое должно пройти от настоящего момента) (интервал обновления)		//$id_user = sprintf("%d", $id_user);				$set ='';		foreach($prot as $k=>$v){			$set[] = " $k='$v' "; 		}					$set_s = implode(',',$set);			//$query = "update 2d_UserProtection set $pole = date_add($pole, interval $past)  WHERE id_user = $id_user";		$query = "update 2d_UserProtection set $set_s WHERE id_user = $id_user";		//die($query);		$result = mysql_query($query); 		//если время прошло (т.е поменялось), то необходимо включить скрипт//die();		if(mysql_affected_rows() == 0){			$object = array();		foreach($prot as $k=>$v){			$object[$k] = $v;		}			$object['id_user'] = $id_user;		//	die(var_dump($object));		return $this->msql->Insert('2d_UserProtection', $object); 			}		return mysql_affected_rows();					}			//	// редактирование признаков движений в различных измерениях	//	public function EditUserMuving($id_users,$dimension,$value){			//$d= $this->user['dimension'];		for($i=0;$i<count($id_users);$i++){			$id_users[$i] = "'".$id_users[$i]."'";					}		$id_users = implode(",",$id_users);			$object = array();		Switch ($dimension) {		case '1':			$object['mouving1'] = $value;			break;		case '2':			$object['mouving2'] = $value;			break;		}		if($dimension ==1 or $dimension==2){			$where =  "id_user in($id_users)"; 			$this->msql->Update('users',$object,$where);		}	}		}